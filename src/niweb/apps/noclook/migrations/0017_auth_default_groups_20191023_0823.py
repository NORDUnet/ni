# -*- coding: utf-8 -*-
# Generated by Django 1.11.25 on 2019-10-23 08:23
from __future__ import unicode_literals

from django.db import migrations
import apps.noclook.vakt.utils as sriutils

def forwards_func(apps, schema_editor):
    # get models
    Group = apps.get_model('auth', 'Group')
    Context = apps.get_model('noclook', 'Context')
    AuthzAction = apps.get_model('noclook', 'AuthzAction')
    GroupContextAuthzAction = apps.get_model('noclook', 'GroupContextAuthzAction')
    NodeHandleContext = apps.get_model('noclook', 'NodeHandleContext')

    contexts = Context.objects.all()

    for context in contexts:
        gr_name = 'read_{}'.format(context.name.lower())
        gw_name = 'write_{}'.format(context.name.lower())
        gl_name = 'list_{}'.format(context.name.lower())
        ga_name = 'admin_{}'.format(context.name.lower())

        # create or get groups
        groupr, created = Group.objects.get_or_create(name=gr_name)
        groupw, created = Group.objects.get_or_create(name=gw_name)
        groupl, created = Group.objects.get_or_create(name=gl_name)
        groupa, created = Group.objects.get_or_create(name=ga_name)

        aa_read  = sriutils.get_read_authaction(AuthzAction)
        aa_write = sriutils.get_write_authaction(AuthzAction)
        aa_list = sriutils.get_list_authaction(AuthzAction)
        aa_admin = sriutils.get_admin_authaction(AuthzAction)

        GroupContextAuthzAction.objects.get_or_create( group = groupr, authzprofile = aa_read, context = context )
        GroupContextAuthzAction.objects.get_or_create( group = groupw, authzprofile = aa_write, context = context )
        GroupContextAuthzAction.objects.get_or_create( group = groupl, authzprofile = aa_list, context = context )
        GroupContextAuthzAction.objects.get_or_create( group = groupa, authzprofile = aa_admin, context = context )


def backwards_func(apps, schema_editor):
    # create or get groups
    Group = apps.get_model('auth', 'Group')
    grouprs = Group.objects.filter(name__startswith="read_")
    groupws = Group.objects.filter(name__startswith="write_")
    groupls = Group.objects.filter(name__startswith="list_")
    groupas = Group.objects.filter(name__startswith="admin_")

    # delete groups
    grouprs.delete()
    groupws.delete()
    groupls.delete()
    groupas.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('noclook', '0016_list_policy_20191023_0558'),
    ]

    operations = [
        migrations.RunPython(forwards_func, backwards_func),
    ]
