# -*- coding: utf-8 -*-
# Generated by Django 1.11.24 on 2019-09-18 06:15
from __future__ import unicode_literals

from django.db import migrations
from os.path import dirname, abspath, join
import csv

BASE_DIR = dirname(abspath(__file__))


new_types = ['Email', 'Phone']
new_dropdowns = ['phone_type', 'email_type']

def add_default_dropdowns(apps, schema_editor):
    Dropdown = apps.get_model('noclook', 'Dropdown')
    Choice = apps.get_model('noclook', 'Choice')

    with open(join(BASE_DIR, 'common_dropdowns.csv')) as f:
        for line in csv.DictReader(f):
            dropdown_name = line['dropdown']

            if dropdown_name in new_dropdowns:
                dropdown, created = Dropdown.objects.get_or_create(name=dropdown_name)
                value = line['value']
                name = line['name'] or value
                if value:
                    Choice.objects.get_or_create(dropdown=dropdown,
                    value=value,
                    name=name)

def remove_default_dropdowns(apps, schema_editor):
    Dropdown = apps.get_model('noclook', 'Dropdown')
    with open(join(BASE_DIR, 'common_dropdowns.csv')) as f:
        unique_dropdowns = set([l['dropdown'] for l in csv.DictReader(f)])
        for dropdown in unique_dropdowns:
            if dropdown in new_dropdowns:
                Dropdown.objects.filter(name=dropdown).delete()

def add_new_nodetype(NodeType, new_type):
    new_nodetype = NodeType(
        type=new_type,
        slug=new_type.lower(),
        hidden=True,
    )

    new_nodetype.save()
    return new_nodetype

def remove_node_type(NodeType, type_name):
    qs = NodeType.objects.filter(type=type_name, slug=type_name.lower())
    if qs:
        for nodetype in qs:
            nodetype.delete()

def forwards_func(apps, schema_editor):
    NodeType = apps.get_model("noclook", "NodeType")

    for new_type in new_types:
        add_new_nodetype(NodeType, new_type)

    add_default_dropdowns(apps, schema_editor)

def reverse_func(apps, schema_editor):
    NodeType = apps.get_model("noclook", "NodeType")

    for new_type in new_types:
        remove_node_type(NodeType, new_type)

    remove_default_dropdowns(apps, schema_editor)


class Migration(migrations.Migration):

    dependencies = [
        ('noclook', '0010_merge_20190903_1136'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
